package im.whj.cn.im_ui.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import im.whj.cn.im_ui.db.entity.MsgDbModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_DB_MODEL".
*/
public class MsgDbModelDao extends AbstractDao<MsgDbModel, String> {

    public static final String TABLENAME = "MSG_DB_MODEL";

    /**
     * Properties of entity MsgDbModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Msg_id = new Property(0, String.class, "msg_id", true, "MSG_ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property IsFrom = new Property(2, boolean.class, "isFrom", false, "IS_FROM");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
    }


    public MsgDbModelDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDbModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_DB_MODEL\" (" + //
                "\"MSG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: msg_id
                "\"USER_NAME\" TEXT NOT NULL ," + // 1: user_name
                "\"IS_FROM\" INTEGER NOT NULL ," + // 2: isFrom
                "\"CONTENT\" TEXT NOT NULL ," + // 3: content
                "\"TIME\" TEXT NOT NULL ," + // 4: time
                "\"TYPE\" INTEGER NOT NULL );"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_DB_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgDbModel entity) {
        stmt.clearBindings();
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(1, msg_id);
        }
        stmt.bindString(2, entity.getUser_name());
        stmt.bindLong(3, entity.getIsFrom() ? 1L: 0L);
        stmt.bindString(4, entity.getContent());
        stmt.bindString(5, entity.getTime());
        stmt.bindLong(6, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgDbModel entity) {
        stmt.clearBindings();
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(1, msg_id);
        }
        stmt.bindString(2, entity.getUser_name());
        stmt.bindLong(3, entity.getIsFrom() ? 1L: 0L);
        stmt.bindString(4, entity.getContent());
        stmt.bindString(5, entity.getTime());
        stmt.bindLong(6, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MsgDbModel readEntity(Cursor cursor, int offset) {
        MsgDbModel entity = new MsgDbModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msg_id
            cursor.getString(offset + 1), // user_name
            cursor.getShort(offset + 2) != 0, // isFrom
            cursor.getString(offset + 3), // content
            cursor.getString(offset + 4), // time
            cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgDbModel entity, int offset) {
        entity.setMsg_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_name(cursor.getString(offset + 1));
        entity.setIsFrom(cursor.getShort(offset + 2) != 0);
        entity.setContent(cursor.getString(offset + 3));
        entity.setTime(cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MsgDbModel entity, long rowId) {
        return entity.getMsg_id();
    }
    
    @Override
    public String getKey(MsgDbModel entity) {
        if(entity != null) {
            return entity.getMsg_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgDbModel entity) {
        return entity.getMsg_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
